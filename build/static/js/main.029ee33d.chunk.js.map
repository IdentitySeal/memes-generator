{"version":3,"sources":["components/DisplayMemes.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayMemes","useState","textAbove","textBelow","text","setText","image","setImage","imageAlt","setImageAlt","memeImage","setMemeImage","src","alt","setImg","set","setSet","imageData","a","axios","get","then","res","allImageData","data","memes","console","log","catch","error","useEffect","handleChange","e","name","target","value","className","type","id","placeholder","onChange","onClick","preventDefault","randomNum","Math","floor","random","length","url","htmlToImage","document","getElementById","blob","FileSaver","saveAs","accept","files","URL","createObjectURL","class","for","Header","height","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.029ee33d.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport * as htmlToImage from 'html-to-image';\r\nimport FileSaver from 'file-saver';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function DisplayMemes() {\r\n    const [text, setText] = useState({ textAbove: '', textBelow: ''});\r\n    const [image,setImage] = useState(\"https://i.imgflip.com/22bdq6.jpg\")\r\n    const [imageAlt,setImageAlt] = useState(\"\")\r\n    const [memeImage, setMemeImage] = useState([])\r\n    const [{alt, src}, setImg] = useState({\r\n      src: image,\r\n      alt: 'Upload an Image'\r\n  });    \r\n  const [set,setSet ] = useState(false)\r\n    const url = 'https://api.imgflip.com/get_memes';\r\n\r\n    const imageData= async()=>{\r\n\r\n        axios.get(url)\r\n        .then((res)=> {\r\n            const allImageData = res.data.data.memes\r\n            console.log (allImageData)\r\n            setMemeImage(allImageData)\r\n        })\r\n        .catch((error)=> {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        imageData();\r\n    }, [])\r\n    \r\n    const HandleRandomMeme = (e)=> {\r\n        e.preventDefault()\r\n        console.log(\"Hey\")\r\n        const randomNum = Math.floor(Math.random()*memeImage.length);  \r\n        const {url,name} = memeImage[randomNum]\r\n        setImage(url)\r\n        setImageAlt(name)\r\n        setSet(false)\r\n\r\n\r\n    }\r\n\r\n  \r\n    const handleChange = (e) => {\r\n      const name = e.target.name;\r\n      const value = e.target.value;\r\n      setText({ ...text, [name]: value });\r\n    };\r\n\r\n    const downloadPreview = (e)=>{\r\n      e.preventDefault();\r\n      htmlToImage.toBlob(document.getElementById('meme-image-text'))\r\n        .then(function (blob) {\r\n            FileSaver.saveAs(blob, `${imageAlt}.png`);\r\n        });\r\n\r\n    }\r\n\r\n    const handleFileChange = (e)=>{\r\n      if(e.target.files[0]) {\r\n        setImg({\r\n            src: URL.createObjectURL(e.target.files[0]),\r\n            alt: e.target.files[0].name\r\n        });    \r\n        setSet(true)\r\n      }       \r\n    } \r\n    return (\r\n        <div className=\"container\">\r\n          <form>\r\n            <div className='form-control'>\r\n              <input\r\n                type='text'\r\n                id='textAbove'\r\n                name='textAbove'\r\n                value={text.textAbove}\r\n                placeholder ='Input text above'\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            <div className='form-control'>\r\n              <input\r\n                type='text'\r\n                id='textBelow'\r\n                name='textBelow'\r\n                placeholder ='Input text below'\r\n                value={text.textBelow}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            {/*  */}\r\n\r\n\r\n\r\n          </form>\r\n              <div className='canvas-container' key={text.id} id='meme-image-text'>\r\n                {!set ? <img className=\"image\" src={image} alt={imageAlt}/> \r\n                \r\n                :\r\n                <img className=\"image\" src={src} alt={alt}/>\r\n                }\r\n                \r\n\r\n                  <p className=\"topText text\" id='meme-image-text'>{text.textAbove}</p>\r\n                  <p className=\"bottomText text\"id='meme-image-text'>{text.textBelow}</p> \r\n              </div>\r\n              <button onClick={HandleRandomMeme}>Generate Meme Image</button>\r\n              <button onClick = {downloadPreview}>Download Meme</button>\r\n\r\n                <div className=\"image-upload-div\">\r\n                  <input  \r\n                        type=\"file\" \r\n                        accept=\".png, .jpg, .jpeg\" \r\n                        id=\"image-upload\" \r\n                        className=\"visibility\"\r\n                      \r\n                        onChange={handleFileChange}\r\n                    />\r\n                    <label class=\"image-upload-button center\" for=\"image-upload\">Upload Your Image</label>\r\n                </div>\r\n\r\n\r\n      </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            \r\n                <h1>\r\n                    <img \r\n                    src=\"https://i.ibb.co/8mkZ00b/Trollface.png\" \r\n                    alt=\"Troll Face\"\r\n                    height =\"40\"/>\r\n                MEME GENERATOR</h1>\r\n        </header>\r\n    )\r\n}\r\n","import './App.css';\nimport DisplayMemes from './components/DisplayMemes';\nimport Header from './components/Header'\n\nfunction App() {\n  return (    \n    <>\n    <div>\n      <Header/>\n      <DisplayMemes/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}